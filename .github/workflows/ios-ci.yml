name: iOS CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ios-app/**'
      - '.github/workflows/ios-ci.yml'
  push:
    branches: [ main, develop ]
    paths:
      - 'ios-app/**'
      - '.github/workflows/ios-ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  XCODE_VERSION: '14.3.1'
  IOS_DESTINATION: 'platform=iOS Simulator,name=iPhone 16,OS=18.6'
  WORKING_DIRECTORY: './ios-app'

jobs:
  build-and-test:
    name: Build and Test iOS App
    runs-on: macos-13
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Cache SPM Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.WORKING_DIRECTORY }}/d_n_w.xcodeproj/project.xcworkspace/xcshareddata/swiftpm
          ~/Library/Caches/org.swift.swiftpm/
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        swiftlint version
    
    - name: Run SwiftLint
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        swiftlint lint --strict --reporter github-actions-logging
    
    - name: Build iOS App
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        xcodebuild clean build \
          -project d_n_w.xcodeproj \
          -scheme d_n_w \
          -configuration Debug \
          -destination '${{ env.IOS_DESTINATION }}' \
          -derivedDataPath DerivedData \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          | xcpretty
    
    - name: Run Unit Tests
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        xcodebuild test \
          -project d_n_w.xcodeproj \
          -scheme d_n_w \
          -configuration Debug \
          -destination '${{ env.IOS_DESTINATION }}' \
          -derivedDataPath DerivedData \
          -enableCodeCoverage YES \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          | xcpretty
    
    - name: Generate Code Coverage Report
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        xcrun xccov view DerivedData/Logs/Test/*.xcresult/TestSummaries.plist --report --only-targets
    
    - name: Check Coverage Threshold
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        COVERAGE=$(xcrun xccov view DerivedData/Logs/Test/*.xcresult --report --json | jq '.targets[] | select(.name=="d_n_w") | .lineCoverage' | head -1)
        COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d. -f1)
        echo "Current coverage: $COVERAGE_PERCENT%"
        
        if [ "$COVERAGE_PERCENT" -lt 80 ]; then
          echo "❌ Coverage ($COVERAGE_PERCENT%) is below 80% threshold"
          exit 1
        else
          echo "✅ Coverage ($COVERAGE_PERCENT%) meets 80% threshold"
        fi
    
    - name: Archive Build Artifacts
      if: success()
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        xcodebuild archive \
          -project d_n_w.xcodeproj \
          -scheme d_n_w \
          -configuration Debug \
          -destination generic/platform=iOS \
          -archivePath DerivedData/d_n_w.xcarchive \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty
    
    - name: Upload Build Artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: ios-build-artifacts-${{ github.sha }}
        path: |
          ${{ env.WORKING_DIRECTORY }}/DerivedData/d_n_w.xcarchive
          ${{ env.WORKING_DIRECTORY }}/DerivedData/Logs/Test/*.xcresult
        retention-days: 30

  test-report:
    name: Test Results Summary
    needs: build-and-test
    runs-on: macos-13
    if: always()
    
    steps:
    - name: Test Results
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ All tests passed successfully"
          echo "✅ Code coverage meets 80% threshold"
          echo "✅ SwiftLint validation passed"
          echo "✅ Build artifacts generated"
        else
          echo "❌ Build and test job failed"
          exit 1
        fi